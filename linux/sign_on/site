#!/bin/bash

# Print usage
usage() {
	echo "Usage:"
	echo "    $(basename $0) [-h|-?] [-n FILE_NAME] [-p PASSWORD] [-ericqdftlim] SITE_CODE"
	echo ""
	echo "Options:"
	echo "    -h/-?"
	echo "        Help: Displays the help/usage message. AKA... this..."
	echo "    -n FILE_NAME"
	echo "        fileName: Specifies a different file lcoation for the connection list."
	echo "        The default file location is the same directory as the script."
	echo "    -e"
	echo "        Edit: Puts the script into edit mode. Edit mode allows you to change"
	echo "        the properties of that connection. If a field is left blank then"
	echo "        the current value is kept. If the value is blank you will be"
	echo "        prompted every time you select that site to enter a value."
	echo "        Will create a backup of connections as a .backup "
	echo "    -r"
	echo "        Root: Logs in as root. Also works with -c"
	echo "    -i"
	echo "        IP: Returns only the IP of the provided site"
	echo "    -c"
	echo "        Copy: Returns the username@ip formated for use with scp."
	echo "          ie. \"scp \$(site -c SITE_CODE):file1 .\""
	echo "    -q"
	echo "        Quite: Makes the script have minimal output."
	echo "    -d"
	echo "        Delete: Deletes the entry. Will create a backup of connections as a .backup"
	echo "    -f"
	echo "        Force: Forces the script so it does not ask for confirmation."
	echo "    -t"
	echo "        Tunnel: Tells the program to estabish a tunnel to access mysql"
	echo "          -L 4567:localhost:3306"
	echo "    -l"
	echo "        List: Lists all sites matching the partial SITE_CODE provided. "
	echo "          ie: site -l SHC returns all Shell Canada sites"
	echo "    -p PASSWORD"
	echo "        Password: Supply the program password (One password to rule them all)"
	echo "        This is not a site specific password. It is used to decrypt the other passwords"
	echo "        NOTE:" 
	echo "            If the script's master password changes it requires all site passwords to"
	echo "            be removed and re-entered."
	echo "    -m"
	echo "        Master: Changes the master passowrd of the script."
	echo "        WARNING!! -- This will remove all stored site passwords! Use with caution"
	echo ""
	echo "Brought to you by Tyler Hoyt."
}

# Process Arguments
# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.
# Initialize our own variables:
DELIM=';'
ROOTUSER='root'
CONNECTIONS="$(dirname $(readlink -f $0))/connections"
EDIT=0
ROOT=0
IPONLY=0
USERIP=0
VERB=1
FORCE=0
DEL=0
USE_TUNNEL=0
LIST=0
MASTER=0
PASSWORD=""	########################################### To make this program secure. remove the text between the quotes so it assigns PASSWORD an empty string.
HPASSWORD=$(head -n 1 $CONNECTIONS | sed 's/#//') ############### This is the md5 of the password. 
PASS_HINT="The password is the same as most tms6 servers"


while getopts "h?n:ericqfdp:tlm" opt; do
    case "$opt" in
    h|\?)
        usage
		exit 0
        ;;
    n)
		CONNECTIONS=$(readlink -f $OPTARG)
		;;
	e)
		EDIT=1
		;;
	r)
		ROOT=1
		;;
	i)
		IPONLY=1
		;;
	c)
		USERIP=1
		;;
	q)
		VERB=0
		;;
	f)
		FORCE=1
		;;
	d)
		DEL=1
		;;
    p)
		PASSWORD=$OPTARG
		;;
    t)
		USE_TUNNEL=1
		;;
	l)
		LIST=1
		;;
	m)
		MASTER=1
		;;
	*)
        echo "What the hell did you enter?!?"
        exit 1
		;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

if [ "$#" -ne "1" ]; then			#If the site code is not provided
	if [ "$LIST" -ne "1" ] ; then	#And if I did not ask it to list all sites
		if [ "$MASTER" -eq "0" ] ; then
			usage						#Then print usage
			exit 0						#And exit
		fi
	fi
fi

################################################################################
############################## Actual code... ##################################
################################################################################

ask() {
	#If force is turned on then don't ask, simply return true
	if [ "$FORCE" == "1" ] ; then
		return 0
	fi
	#Keep asking the question until I get a good response
	while :; do
		read -p "$1 (y/n): " -r
		echo
		case $REPLY in
			N|n)
		    	return 1
		    	;;
			Y|y)
		    	return 0
	    		;;
			*)
				echo "I dont understand \"$REPLY\""
				;;
		esac
	done
}

# Get the line that matchest the site code provided
line=$(grep -i "^$1" $CONNECTIONS)

# Ensure there is only one entry for that site code
if [ $(echo "$line" | wc -l) -gt "1" ]; then
	if [ "$LIST" -eq "0" ] ; then
		if [ "$MASTER" -eq "0" ] ; then
			echo "There are two lines with that site code! DANGER WILL ROBINSON, DANGER!"
			exit 1
		fi
	fi
fi

# If the line is good then parse it in to components
code=$(echo "$line" | cut -f1 -d$DELIM | sed "s/^\s\+//" | sed "s/\s\+$//")
ip=$(echo "$line" | cut -f2 -d$DELIM  | sed "s/^\s\+//" | sed "s/\s\+$//")
user=$(echo "$line" | cut -f3 -d$DELIM  | sed "s/^\s\+//" | sed "s/\s\+$//")
pass=$(echo "$line" | cut -f4 -d$DELIM  | sed "s/^\s\+//" | sed "s/\s\+$//")
rpass=$(echo "$line" | cut -f5 -d$DELIM  | sed "s/^\s\+//" | sed "s/\s\+$//")

#If the user wants the username@ip then print it for root or regular
if [ "$USERIP" == "1" ] ; then
	if [ "$ROOT" == "1" ] ; then
		echo "$ROOTUSER@$ip"
	else
		echo "$user@$ip"
	fi
	exit 0
fi

#If the user only wants the IP then print it and exit
if [ "$IPONLY" == "1" ] ; then
	echo "$ip"
	exit 0
fi

#List all sites that start with the given code
if [ "$LIST" == "1" ] ; then
	echo "$(grep -v '#' $CONNECTIONS | egrep -i "^$1" | cut -f1 -d$DELIM)"
	exit 0
fi

#Delete the chosen record
if [ "$DEL" == "1" ] ; then
	if ask "Are you sure you want to delete $code?" ; then
		if ask "Are you really sure you want to delete $code?" ; then
			sed -i.backup "/^$code.*/d" $CONNECTIONS
			echo "I created a .backup of the old connections incase you weren't sure"
		fi
	fi
	exit 0
fi

# If the user did not supply the password through the command line
#	and the password is not included in the headder then get it.
tries=0
while [ "$(echo $PASSWORD | md5sum)" != "$HPASSWORD"  ] ; do
	read -sp "Password: " PASSWORD
	echo
	if [ "$(echo $PASSWORD | md5sum)" != "$HPASSWORD" ] ; then
		tries=$(($tries+1))
		echo "$tries failed attempt(s)"
		if [ $tries -eq 2 ] ; then
			echo "$PASS_HINT"
		fi
		if [ $tries -eq 3 ] ; then
			echo "Too many failed attempts"
			exit 0
		fi
	fi
done

# Change the master password of the script
if [ "$MASTER" -eq "1" ] ; then
	if ! ask "Are you sure you want to change the master password?" ; then
		exit 0
	fi
	if ! ask "You realize this will reset all of the saved passwords?" ; then
		exit 0
	fi
	newpass1="1"
    newpass2="2"
    while [ "$newpass1" != "$newpass2" ] ; do
        read -sp "Enter new password: " newpass1
        echo
        read -sp "Please re-enter  password: " newpass2
        echo
        if [ "$newpass1" != "$newpass2" ] ; then
            echo "The passwords entered do not match. Please try again..."
            echo
        fi
    done
	# Now we established a new password.
	# Hash the password and replace the 1st line of the connections with the hashed password
	newhash=$(echo $newpass1 | md5sum | sed 's/^/#/')
	#Replace the first line with the new hash and remove anything after 3rd column form connections
	sed -i.oldpass -e "1s/.*/$newhash/ ; /^#/! s/\(^[^$DELIM]*$DELIM[^$DELIM]*$DELIM[^$DELIM]*$DELIM\).*/\1/" $CONNECTIONS
	exit 0
fi

#If anything is missing or we are in edit mode then prompt the user
if [ -z "$code" ]; then
	if ! ask "There is no site information for site \"$(echo $1 | tr '[:lower:]' '[:upper:]')\". Would you like to add it?"; then
		exit 0
	fi
	mod=1
	code="$(echo $1 | tr '[:lower:]' '[:upper:]')"
fi

if [ -z "$ip" ] || [ "$EDIT" == "1" ] ; then
	echo "Enter new IP for site $code"
	read -p "Please enter an IP: " newip
	if [ ! -z "$newip" ] ; then
		ip=$newip
		mod=1
	fi
fi

if [ -z "$user" ] || [ "$EDIT" == "1" ] ; then
	echo "Enter new user information for site $code"
	read -p "Please enter the User Name: " newuser
	if [ ! -z $newuser ] ; then
		user=$newuser
		mod=1
	fi
fi

if [ -z "$pass" ] || [ "$EDIT" == "1" ] ; then
	newpass1="1"
	newpass2="2"
	while [ "$newpass1" != "$newpass2" ] ; do
    	read -sp "Enter new password for user \"$user\" at site $code: " newpass1
		echo
    	read -sp "Please re-enter \"$user's\" password: " newpass2
		echo
		if [ "$newpass1" != "$newpass2" ] ; then
			echo "The passwords entered do not match. Please try again..."
			echo
		fi
	done
	if [ ! -z $newpass1 ] ; then
		pass=$(echo $newpass1 | openssl enc -aes-128-cbc -a -salt -pass pass:"$PASSWORD")
		mod=1
	fi
fi

if [ -z "$rpass" ] || [ "$EDIT" == "1" ] ; then
	newrpass1="1"
	newrpass2="2"
	while [ "$newrpass1" != "$newrpass2" ] ; do
		read -sp "Enter new \"root\" password for site $code: " newrpass1
		echo
    	read -sp "Please re-enter the \"root\" password: " newrpass2
		echo
		if [ "$newrpass1" != "$newrpass2" ] ; then
			echo "The passwords entered do not match. Please try again..."
			echo
		fi
	done
	if [ ! -z $newrpass1 ] ; then
		rpass=$(echo $newrpass1 | openssl enc -aes-128-cbc -a -salt -pass pass:"$PASSWORD")
		mod=1
	fi
fi

# If any of the fields were modefied then ask if it's ok and write it to the file
if [ "$mod" == "1" ] ; then
	newstring="$code$DELIM $ip$DELIM $user$DELIM $pass$DELIM $rpass"
	#echo -e "Writing connection to file:\n\t$newstring"
	#if ask "Is this ok?" ; then
		echo "Writing to connection file..."
		sed -i.backup "/^$code.*/d" $CONNECTIONS
		echo "$newstring" >> $CONNECTIONS
	#fi
fi

#Display the info for the user if verbose
if [ "$VERB" == "1" ] ; then 
	echo "Site Code:  $code"
	echo "IP:         $ip"
	echo "User:       $user"
	echo "user's pw:  $pass"
	echo "root pw:    $rpass"
fi

#Log in to site
if ! ask "Would you like to log in?"; then
	exit 0
fi
if [ "$ROOT" == "1" ] ; then
	$(dirname $(readlink -f $0))/sign_in $ip $ROOTUSER $(echo $rpass | openssl enc -aes-128-cbc -a -d -salt -pass pass:"$PASSWORD") $USE_TUNNEL
else
	$(dirname $(readlink -f $0))/sign_in $ip $user $(echo $pass | openssl enc -aes-128-cbc -a -d -salt -pass pass:"$PASSWORD") $USE_TUNNEL
fi
